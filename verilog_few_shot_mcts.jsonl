{"task_id": "review2015_fsmonehot", "completion": "\n    wire S, S1, S11, S110, B0, B1, B2, B3, Count, Wait;\n    \n    assign {S, S1, S11, S110, B0, B1, B2, B3, Count, Wait} = state;\n\t\n\t// State transition logic\n    assign S_next    = (~d & ~done_counting) | (ack & done);\n    assign S1_next   = d & ~S;\n    assign B0_next   = d & S1;\n    assign B1_next   = shift_ena & B0;\n    assign B2_next   = shift_ena & B1;\n    assign B3_next   = shift_ena & B2;\n    assign Count_next = (~d & ~done_counting) | (ack & done);\n    assign Wait_next  = ack & done_counting;\n    \n\t// Output logic\n    assign counting  = Count;\n    assign done      = Wait & ack;\n    assign shift_ena = ~(B0 | B1 | B2 | B3) & (S110 | S11);  // Shift only when not in busy states\n    \nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 53, "eval_time": "932.7715s", "mean_test_time": "0.5440s"}}
{"task_id": "dff8ar", "completion": "\n\talways @(posedge clk or posedge areset) begin\n\t\tif (areset) \n\t\t\tq <= 8'b0;\n\t\telse \n\t\t\tq <= d;\n\tend\nendmodule\n\n", "stats": {"num_rollouts": 1, "num_generations": 1, "eval_time": "3.6358s", "mean_test_time": "0.4497s"}}
{"task_id": "kmap3", "completion": "\n\talways @(*) begin\n\t\tif (c == 0 && d ==0)\n\t\t\tout = 0;\n\t\telse if ((a == 1 && b == 0 && c==0 && d==1) || (a == 0 && b == 0 && c==0 && d==0))\n\t\t\tout = 0;\n\t\telse if ((a == 0 && b == 1 && c==0 && d==0) || (a == 0 && b == 0 && c==1 && d==0))\n\t\t\tout = 1;\n\t\telse \n\t\t\tout = d; // for cases where a,b are both 1 or c,d are both 1.\n\tend\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 35, "eval_time": "184.2308s", "mean_test_time": "0.4202s"}}
{"task_id": "lemmings1", "completion": "\n\treg [1:0] state;\n\tparameter [1:0] LEFT = 2'b00, RIGHT = 2'b01;\n\t\n\t// State transition logic\n\talways @(posedge clk or posedge areset) begin\n\t\tif (areset)\n\t\t\tstate <= LEFT;\n\t\telse if ((bump_left && !bump_right) || (!bump_left && bump_right)) \n\t\t\tstate <= RIGHT;\n\t\telse if (bump_left && bump_right)\n\t\t\tstate <= state; // maintain current state\n\tend\n\t\n\t// Output logic\n\tassign walk_left = (state == LEFT);\n\tassign walk_right = (state == RIGHT);\n\t\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 24, "eval_time": "254.1928s", "mean_test_time": "0.4232s"}}
{"task_id": "2013_q2afsm", "completion": "\n\treg [2:0] state, next_state;\n\t\n\tparameter [2:0]\n\t\tA = 3'b000,\n\t\tB = 3'b001,\n\t\tC = 3'b010,\n\t\tD = 3'b011;\n\t\t\n\t// State table\n\talways @(*) begin\n\t\tcase (state) \n\t\t\tA: if (r[1] | r[2] | r[3]) next_state = B;\n\t\t\t\telse next_state = A;\n\t\t\tB: if (~r[1]) next_state = A;\n\t\t\t\telse next_state = B;\n\t\t\tC: if (~r[2]) next_state = A;\n\t\t\t\telse next_state = C;\n\t\t\tD: if (~(r[1] | r[2] | r[3])) next_state = D;\n\t\t\t\telse next_state = A;\n\t\tendcase\n\tend\n\t\n\t// State flip-flops\n\talways @(posedge clk or negedge resetn) begin\n\t\tif (~resetn) state <= A;\n\t\telse state <= next_state;\n\tend\n\t\n\t// Outputs\n\tassign g[1] = (state == B);\n\tassign g[2] = (state == C);\n\tassign g[3] = ((state == D) & r[3]);\n\t\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 28, "eval_time": "605.1004s", "mean_test_time": "0.7803s"}}
{"task_id": "fsm_hdlc", "completion": "\n\treg [3:0] state;\n\twire nextState;\n\t\n\talways @(posedge clk or posedge reset) begin\n\t\tif (reset) \n\t\t\tstate <= 4'b1000; // Reset State\n\t\telse \n\t\t\tstate <= {in, state[3:1]};\n\tend\n\t\n\t// Outputs\n\tassign disc = (state == 4'b0111);\n\tassign flag = (state == 4'b011110);\n\tassign err  = (|(state & 4'b1000)); // OR gate to check if there are more than one '1' in the state.\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 40, "eval_time": "706.1109s", "mean_test_time": "0.3748s"}}
{"task_id": "bugs_mux2", "completion": "\nThe bug in this code is that the output 'out' is of type 'reg', which means it can only hold one bit. However, we want to have an 8-bit wide mux, so we need to make 'out' a [7:0] bit register. The corrected code would look like this:\n\n\tassign out = (~sel & a) | (sel & b);\n\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 27, "eval_time": "121.0415s", "mean_test_time": "0.3882s"}}
{"task_id": "review2015_count1k", "completion": "\n\t\n\talways @(posedge clk or posedge reset) begin\n\t\tif (reset)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  // Reset condition\n\t\t\tq <= 10'd0;\n\t\telse if (q == 10'd999)   // Wrap around condition\n\t\t\tq <= 10'd0;\n\t\telse\n\t\t\tq <= q + 10'd1;       // Increment counter\n\tend\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 29, "eval_time": "143.2355s", "mean_test_time": "0.4869s"}}
{"task_id": "circuit8", "completion": "\n\treg p_next, q_next;\n\t\n\talways @(posedge clock) begin\n\t\tif (a) begin\n\t\t\tp_next <= 0;\n\t\t\tq_next <= p;\n\t\tend else begin\n\t\t\tp_next <= p ^ q;\n\t\t\tq_next <= a ? 1'b0 : ~p & q;\n\tend\n\t\n\tp <= p_next;\n\tq <= q_next;\n\t\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 37, "eval_time": "271.4290s", "mean_test_time": "0.5185s"}}
{"task_id": "m2014_q4e", "completion": "\n\tassign out = ~(in1 | in2);\nendmodule\n\n", "stats": {"num_rollouts": 1, "num_generations": 1, "eval_time": "1.8836s", "mean_test_time": "0.5044s"}}
{"task_id": "vector4", "completion": "\n\tassign out = { {24{in[7]}}, in };\nendmodule\n\n", "stats": {"num_rollouts": 17, "num_generations": 3, "eval_time": "9.4636s", "mean_test_time": "0.3661s"}}
{"task_id": "2014_q3fsm", "completion": "\n\treg [2:0] counter;\n\treg [1:0] state;\n\tparameter A = 2'b00, B = 2'b01, C = 2'b10, D = 2'b11;\n\t\n\talways @(posedge clk or posedge reset) begin\n\t\tif (reset) begin\n\t\t\tstate <= A;\n\t\t\tcounter <= 3'b000;\n\t\t\tz <= 1'b0;\n\t\tend \n\t\telse case (state)\n\t\t\tA: if (!s) state <= B;\n\t\t\tB: begin\n\t\t\t\tif(w) counter <= counter + 1;\n\t\t\t\tif(counter == 3'b100) begin\n\t\t\t\t\tz <= 1'b1;\n\t\t\t\t\tcounter <= 3'b000;\n\t\t\t\tend \n\t\t\t\telse state <= C;\n\t\t\tend\n\t\t\tC: if (w) counter <= counter + 1;\n\t\t\tD: ; // do nothing\n\t\tdefault: state <= A;\n\tendcase\nend\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 26, "eval_time": "423.4750s", "mean_test_time": "0.4300s"}}
{"task_id": "zero", "completion": "\n\tassign zero = 1'b0;\nendmodule\n\n", "stats": {"num_rollouts": 1, "num_generations": 1, "eval_time": "1.6425s", "mean_test_time": "0.4073s"}}
{"task_id": "always_if2", "completion": "\nalways @(*) begin\n\tif (cpu_overheated)\n\t    shut_off_computer = 1;\n\telse \n\t    shut_off_computer = 0;\nend\n\nalways @(*) begin\n\tif (~arrived & ~gas_tank_empty)\n\t   keep_driving = 1;\n\telse if (arrived | gas_tank_empty)\n\t   keep_driving = 0;\nend\n\nendmodule\n", "stats": {"num_rollouts": 1, "num_generations": 1, "eval_time": "6.8309s", "mean_test_time": "0.4330s"}}
{"task_id": "counter_2bc", "completion": "\n\talways @(posedge clk or posedge areset) begin\n        if (areset) \n            state <= 2'b01;\n        else if (train_valid && train_taken && state < 3'd3) \n            state <= state + 1;\n        else if (train_valid && !train_taken && state > 3'd0) \n            state <= state - 1;\n    end\nendmodule\n", "stats": {"num_rollouts": 1, "num_generations": 1, "eval_time": "6.4333s", "mean_test_time": "0.4275s"}}
{"task_id": "circuit1", "completion": "\n\tassign q = (~a & ~b) | (a & b);\nendmodule\n\n```\n\nDescription:\n", "stats": {"num_rollouts": 128, "num_generations": 29, "eval_time": "88.5847s", "mean_test_time": "0.4056s"}}
{"task_id": "andgate", "completion": "\n\tassign out = a & b;\nendmodule\n\n", "stats": {"num_rollouts": 1, "num_generations": 1, "eval_time": "1.6195s", "mean_test_time": "0.4158s"}}
{"task_id": "mux9to1v", "completion": "\nalways_comb begin\n\tcase(sel) \n\t\t4'b0000: out = a;\n\t\t4'b0001: out = b;\n\t\t4'b0010: out = c;\n\t\t4'b0011: out = d;\n\t\t4'b0100: out = e;\n\t\t4'b0101: out = f;\n\t\t4'b0110: out = g;\n\t\t4'b0111: out = h;\n\t\t4'b1000: out = i;\n\t\tdefault: out = 16'hFFFF; // All bits set to 1 for sel > 9.\n\tendcase\nend\nendmodule\n", "stats": {"num_rollouts": 1, "num_generations": 1, "eval_time": "9.9486s", "mean_test_time": "0.4656s"}}
{"task_id": "2012_q1g", "completion": "\n\tassign f = (x[3] && !x[2]) || (!x[3] && x[1]);\nendmodule\n\n", "stats": {"num_rollouts": 128, "num_generations": 42, "eval_time": "142.4151s", "mean_test_time": "0.4174s"}}
{"task_id": "step_one", "completion": "\n\tassign one = 1'b1;\nendmodule\n\n", "stats": {"num_rollouts": 1, "num_generations": 1, "eval_time": "1.6664s", "mean_test_time": "0.4154s"}}
{"task_id": "count1to10", "completion": "\n\t\n\talways @(posedge clk) begin\n\t\tif (reset) \n\t\t\tq <= 4'b0001;\n\t\telse if (q == 4'b1010)\n\t\t\tq <= 4'b0001;\n\t\telse\n\t\t\tq <= q + 1;\n\tend\nendmodule\n", "stats": {"num_rollouts": 70, "num_generations": 10, "eval_time": "58.1464s", "mean_test_time": "0.4209s"}}
{"task_id": "m2014_q4d", "completion": "\n\t\n\tDFF XOR_DFF (\n\t\t.clk(clk), \n\t\t\t.d(in ^ out), \n\t\t\t.q(out)\n\t\t);\nendmodule\n\n", "stats": {"num_rollouts": 128, "num_generations": 35, "eval_time": "166.6131s", "mean_test_time": "0.3846s"}}
{"task_id": "fsm1", "completion": "\n\treg state; // define state\n\n\talways @(posedge clk or posedge areset) begin \n\t\tif(areset) \n\t\t\tstate <= 1'b0; // asynchronous reset into B\n\t\telse \n\t\t\tcase ({state,in}) \n\t\t\t\t2'b00: state <= 1'b0; \n\t\t\t\t2'b01: state <= 1'b1; \n\t\t\t\t2'b10: state <= 1'b0; \n\t\t\t\t2'b11: state <= 1'b1; \n\t\t\tendcase;\n\tend\n\n\tassign out = state; // output the current state\n\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 37, "eval_time": "320.7867s", "mean_test_time": "0.4152s"}}
{"task_id": "bugs_case", "completion": "\n\talways @(*) begin\n\t\tcase (code)\n\t\t\t8'h45: begin out = 4'd0; valid = 1; end // 0\n\t\t\t8'h16: begin out = 4'd1; valid = 1; end // 1\n\t\t\t8'h1E: begin out = 4'd2; valid = 1; end // 2\n\t\t\t8'h26: begin out = 4'd3; valid = 1; end // 3\n\t\t\t8'h25: begin out = 4'd4; valid = 1; end // 4\n\t\t\t8'h2E: begin out = 4'd5; valid = 1; end // 5\n\t\t\t8'h36: begin out = 4'd6; valid = 1; end // 6\n\t\t\t8'h3D: begin out = 4'd7; valid = 1; end // 7\n\t\t\t8'h3E: begin out = 4'd8; valid = 1; end // 8\n\t\t\t8'h46: begin out = 4'd9; valid = 1; end // 9\n\t\t\tdefault: begin out = 0; valid = 0; end\n\t\tendcase\n\tend\nendmodule\n", "stats": {"num_rollouts": 109, "num_generations": 22, "eval_time": "375.2886s", "mean_test_time": "0.4197s"}}
{"task_id": "dff16e", "completion": "\n\t\n\talways @(posedge clk or negedge resetn) begin\n\t\tif(!resetn)\n\t\t\tq <= 16'b0;\n\t\telse if (byteena[1]) \n\t\t\tq <= {d[15:8], q[7:0]};\n\t\telse if (byteena[0]) \n\t\t\tq <= {q[15:8], d[7:0]};\n\tend\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 25, "eval_time": "152.8533s", "mean_test_time": "0.4223s"}}
{"task_id": "fsm_onehot", "completion": "\n\t\n\tassign next_state[0] = state[7]; // S0 --0--> S0\n\tassign next_state[1] = (~state[8]) & in; // S0 --1--> S1\n\tassign next_state[2] = state[5]; // S1 --0--> S0\n\tassign next_state[3] = (~state[6]) & in; // S1 --1--> S2\n\tassign next_state[4] = state[3]; // S2 --0--> S0\n\tassign next_state[5] = (~state[4]) & in; // S2 --1--> S3\n\tassign next_state[6] = state[1]; // S3 --0--> S0\n\tassign next_state[7] = (~state[2]) & in; // S3 --1--> S4\n\tassign next_state[8] = state[9] | ((~state[0]) & (~in)); // S4 --0--> S0, --1--> S5\n\tassign next_state[9] = state[9] | (state[0] & in); // S5 --0--> S8, --1--> S6\n\n\tassign out1 = ~(state[7] | state[5] | state[3] | state[1]); // Outputs are zero unless otherwise specified.\n\tassign out2 = (state[9] & ~in) | (state[0] & in); \nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 42, "eval_time": "1088.8959s", "mean_test_time": "0.3914s"}}
{"task_id": "conditional", "completion": "\n\talways @* begin\n\t\tif (a < b && a < c && a < d) \n\t\t\tmin = a;\n\t\telse if (b < a && b < c && b < d) \n\t\t\tmin = b;\n\t\telse if (c < a && c < b && c < d) \n\t\t\tmin = c;\n\t\telse \n\t\t\tmin = d;\n\tend\nendmodule\n", "stats": {"num_rollouts": 1, "num_generations": 1, "eval_time": "5.8548s", "mean_test_time": "0.4186s"}}
{"task_id": "gates4", "completion": "\n\tassign out_and = &in;\n\tassign out_or = |in;\n\tassign out_xor = ^in;\nendmodule\n\n", "stats": {"num_rollouts": 1, "num_generations": 1, "eval_time": "3.1613s", "mean_test_time": "0.4162s"}}
{"task_id": "review2015_fancytimer", "completion": "\n\t\n\tlocalparam PATTERN = 4'b1101;\n\treg [3:0] delay;\n\treg [3:0] counter;\n\treg [1:0] state;\n\tparameter SEARCHING = 2'd0, COUNTING = 2'd1, DONE = 2'd2;\n\twire pattern_detected;\n\t\n\t// State machine to handle the timer operations\n\talways @(posedge clk or posedge reset) begin\n\t\tif (reset) begin\n\t\t\tstate <= SEARCHING;\n\t\t\tcounting <= 1'b0;\n\t\t\tdone <= 1'b0;\n\t\t\tcounter <= 4'd0;\n\t\t\tdelay <= 4'd0;\n\t\tend else case(state) \n\t\t\tSEARCHING: begin\n\t\t\t\tif (pattern_detected) begin\n\t\t\t\t\tstate <= COUNTING;\n\t\t\t\t\tcounting <= 1'b1;\n\t\t\t\t\tdone <= 1'b0;\n\t\t\t\t\tcounter <= delay + 4'd1; // count for delay+1 cycles\n\t\t\t\tend\n\t\t\tend\n\t\t\tCOUNTING: begin\n\t\t\t\tif (counter == 4'd0) begin\n\t\t\t\t\tstate <= DONE;\n\t\t\t\t\tcounting <= 1'b0;\n\t\t\t\t\tdone <= 1'b1;\n\t\t\t\t\tcounter <= delay + 4'd1; // count for delay+1 cycles\n\t\t\t\tend else if(ack) begin \n                    state <= SEARCHING;\n                end else begin\n\t\t\t\t\tcounter <= counter - 4'd1;\n\t\t\t\tend\n\t\t\tend\n\t\t\tDONE: begin\n\t\t\t\tif (ack) begin\n\t\t\t\t\tstate <= SEARCHING;\n\t\t\t\t\tdone <= 1'b0;\n\t\t\t\tend\n\t\t\tend\n\t\tendcase\n\tend\n\t\n\t// Detect the pattern 1101 and shift in the next 4 bits to determine delay\n\talways @(posedge clk or posedge reset) begin\n\t\tif (reset) begin\n\t\t\tpattern_detected <= 1'b0;\n\t\t\tdelay <= 4'd0;\n\t\tend else if (state == SEARCHING) begin\n\t\t\tif (data && pattern_detected) begin // shift in the next 4 bits\n\t\t\t\tdelay <= {data, delay[3:1]};\n\t\t\tend else if (!data && !pattern_detected) begin // detect the pattern\n\t\t\t\tpattern_detected <= 1'b0;\n\t\t\tend else if (data && !pattern_detected) begin \n\t\t\t\tpattern_detected <= 1'b1;\n\t\t\tend\n\t\tend\n\tend\n\t\n\t// Output current remaining time\n\tassign count = state == COUNTING ? counter - 4'd1 : delay + 4'd1;\n\t\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 32, "eval_time": "859.0011s", "mean_test_time": "3.0548s"}}
{"task_id": "ece241_2013_q4", "completion": "\n\t\n\treg [3:1] prev_s;\n\t\n\talways @(posedge clk or posedge reset) begin\n\t\tif (reset) begin\n\t\t\tprev_s <= 0;\n\t\t\t{fr3, fr2, fr1, dfr} <= 4'b1111;\n\t\tend else begin\n\t\t\tprev_s <= s;\n\t\t\t\n\t\t\tcase(s) \n\t\t\t\t3'b111: {fr3, fr2, fr1, dfr} <= 4'b0000; // Above s[3]\n\t\t\t\t3'b110: {fr3, fr2, fr1, dfr} <= 4'b0010; // Between s[3] and s[2]\n\t\t\t\t3'b101: {fr3, fr2, fr1, dfr} <= 4'b0101; // Between s[2] and s[1]\n\t\t\t\tdefault: {fr3, fr2, fr1, dfr} <= 4'b1011; // Below s[1]\n\t\t\tendcase\n\t\t\t\n\t\t\tif (s < prev_s) \n\t\t\t\tdfr <= ~dfr; // If the previous level was lower than the current level, increase flow rate by opening Supplemental flow valve.\n\t\tend\n\tend\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 32, "eval_time": "649.8750s", "mean_test_time": "0.4487s"}}
{"task_id": "mux256to1v", "completion": "\n\n\tassign out = in[(sel+1)*4-1:sel*4];\n\t\nendmodule\n\n```\n\nDescription:\n", "stats": {"num_rollouts": 128, "num_generations": 27, "eval_time": "68.2738s", "mean_test_time": "0.3361s"}}
{"task_id": "hadd", "completion": "\n\tassign sum = a ^ b;\n\tassign cout = a & b;\nendmodule\n\n", "stats": {"num_rollouts": 1, "num_generations": 1, "eval_time": "2.1939s", "mean_test_time": "0.4231s"}}
{"task_id": "circuit9", "completion": "\n\treg [2:0] counter;\n\talways @(posedge clk) begin\n\t\tif (!a)\n\t\t\tcounter <= 3'b100;\n\t\telse if (counter == 3'b100) \n\t\t\tcounter <= 3'b001;\n\t\telse \n\t\t\tcounter <= counter << 1;\n\tend\n\tassign q = counter;\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 34, "eval_time": "279.9347s", "mean_test_time": "0.4082s"}}
{"task_id": "ece241_2013_q7", "completion": "\n\talways @(posedge clk) begin\n\t\tif (!j && !k) \n\t\t\tQ <= Q;\n\t\telse if (!j && k) \n\t\t\tQ <= 0;\n\t\telse if (j && !k) \n\t\t\tQ <= 1;\n\t\telse if (j && k) \n\t\t\tQ <= ~Q;\n\tend\nendmodule\n", "stats": {"num_rollouts": 1, "num_generations": 1, "eval_time": "5.4489s", "mean_test_time": "0.4292s"}}
{"task_id": "ringer", "completion": "\n\n\tassign ringer = ~vibrate_mode & ring;\n\tassign motor = vibrate_mode | ring;\nendmodule\n\n", "stats": {"num_rollouts": 128, "num_generations": 15, "eval_time": "59.2066s", "mean_test_time": "0.4153s"}}
{"task_id": "fsm_serial", "completion": "\n\n\treg [3:0] count;\n\treg [3:0] data;\n\treg start;\n\tparameter START = 4'b0001;\n\tparameter DATA  = 4'b0011;\n\tassign done = (count == START) && in;\n\n\talways @(posedge clk or posedge reset) begin\n\t\tif(reset) begin\n\t\t\tstart <= 0;\n\t\t\tdata  <= 0;\n\t\t\tcount <= 0;\n\t\tend\n\t\telse if(!done) begin\n\t\t\tcase ({in, start}) \n\t\t\t\t2'b10: begin // Start bit detected\n\t\t\t\t\tstart <= 1;\n\t\t\t\t\tcount <= count + 1;\n\t\t\t\tend\n\t\t\t\t2'b01: begin // Data bit received\n\t\t\t\t\tif(count < DATA) begin\n\t\t\t\t\t\tdata  <= {in, data[3:1]};\n\t\t\t\t\t\tcount <= count + 1;\n\t\t\t\t\tend \n\t\t\t\tend\n\t\t\t\t2'b11: begin // Stop bit detected\n\t\t\t\t\tif (count == DATA && in == 0) begin\n\t\t\t\t\t\tstart <= 0;\n\t\t\t\t\t\tdata  <= 0;\n\t\t\t\t\t\tcount <= 0;\n\t\t\t\t end\n\t\t\tendcase\n\t\tend\n\tend\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 36, "eval_time": "590.7586s", "mean_test_time": "0.3684s"}}
{"task_id": "timer", "completion": "\n\treg [9:0] count;\n\tassign tc = (count == 10'b0);\n\t\n\talways @(posedge clk) begin\n\t\tif (load)\n\t\t\tcount <= data;\n\t\telse if (!tc) \n\t\t\tcount <= count - 10'b1;\n\tend\nendmodule\n", "stats": {"num_rollouts": 1, "num_generations": 1, "eval_time": "5.9010s", "mean_test_time": "0.5151s"}}
{"task_id": "circuit7", "completion": "\n\treg temp;\n\t\n\talways @(posedge clk) begin\n\t\t\t\n\t\t\tif(a == 1'b0 && temp == 1'b0)\n\t\t\t\t\tq <= 1'b0;\n\t\t\t\t\t\n\t\t\telse if (a == 1'b1 && temp == 1'b0) \n\t\t\t\t\tbegin\n\t\t\t\t\t\t q <= 1'b1;\n\t\t\t\t\t\t temp <= 1'b1;\n\t\t\t\t\tend\n\t\t\t\n\t\t\telse if( a == 1'b0 && temp == 1'b1 )\n\t\t\t\t\tq <= 1'b1;\n\t\t\t\t\t\n\t\t\telse if (a == 1'b1 && temp == 1'b1) \n\t\t\t\t\tbegin\n\t\t\t\t\t\t q <= 1'b0;\n\t\t\t\t\t\t temp <= 1'b0;\n\t\t\t\t\tend\n\t\t\t\n\tend\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 35, "eval_time": "191.9734s", "mean_test_time": "0.4208s"}}
{"task_id": "gatesv100", "completion": "\n\n\tassign out_both = in[98:0] & {in[99], in[99:1]};\n\tassign out_any = in[98:0] | {in[99], in[99:1]};\n\tassign out_different = in^{in[0], in[99:1]};\n\t\nendmodule\n", "stats": {"num_rollouts": 16, "num_generations": 4, "eval_time": "23.1234s", "mean_test_time": "0.4332s"}}
{"task_id": "vector100r", "completion": "\n\talways @* begin\n\t\tfor(integer i=0;i<100;i++) \n\t\t\tout[i] = in[99-i];\n\tend\nendmodule\n\n", "stats": {"num_rollouts": 1, "num_generations": 1, "eval_time": "3.3847s", "mean_test_time": "0.4494s"}}
{"task_id": "countslow", "completion": "\n\treg [3:0] count;\n\t\n\talways @(posedge clk) begin\n\t\tif (reset) \n\t\t\tcount <= 4'b0;\n\t\telse if (slowena) \n\t\t\tbegin\n\t\t\t\tcase (count)\n\t\t\t\t\t4'd9 : count <= 4'd0;\n\t\t\t\t\tdefault: count <= count + 1'b1;\n\t\t\t\tendcase\n\t\t\tend\n\tend\n\tassign q = count;\nendmodule\n", "stats": {"num_rollouts": 67, "num_generations": 10, "eval_time": "67.6948s", "mean_test_time": "0.4135s"}}
{"task_id": "mt2015_eq2", "completion": "\n\tassign z = ~|(A^B);\nendmodule\n\n", "stats": {"num_rollouts": 1, "num_generations": 1, "eval_time": "2.1117s", "mean_test_time": "0.4505s"}}
{"task_id": "always_case", "completion": "\n\talways @(*) begin\n\t\tcase (sel) \n\t\t\t3'b000 : out = data0;\n\t\t\t3'b001 : out = data1;\n\t\t\t3'b010 : out = data2;\n\t\t\t3'b011 : out = data3;\n\t\t\t3'b100 : out = data4;\n\t\t\t3'b101 : out = data5;\n\t\t\tdefault: out = 4'b0000;\n\t\tendcase\n\tend\nendmodule\n", "stats": {"num_rollouts": 1, "num_generations": 1, "eval_time": "7.3991s", "mean_test_time": "0.4361s"}}
{"task_id": "circuit3", "completion": "\n\twire w1, w2, w3;\n\n\tassign w1 = a & ~b & ~c & ~d;\n\tassign w2 = ~a & b & ~c & ~d;\n\tassign w3 = ~a & ~b & c & d;\n\tassign q = w1 | w2 | w3;\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 31, "eval_time": "172.5771s", "mean_test_time": "0.4175s"}}
{"task_id": "mt2015_q4", "completion": "\n\twire a, b, c, d, e, f, g, h;\n\t\n\t// A submodules\n\tA u1 (.x(x), .y(y), .z(a));\n\tA u2 (.x(x), .y(y), .z(b));\n\tB u3 (.x(x), .y(y), .z(c));\n\tB u4 (.x(x), .y(y), .z(d));\n\t\n\t// OR gate\n\tor (e, a, c);\n\t\n\t// AND gate\n\tand (f, b, d);\n\t\n\t// XOR gate\n\txor (z, e, f);\nendmodule\n\n// A module implementation\nmodule A(input x, y, output z);\n\tassign z = (x^y) & x;\nendmodule\n\n// B module implementation\nmodule B(input x, y, output z);\n\talways @* begin\n\t\tif(~x & ~y) z = 1'b1;\n\t\telse if(x & y) z = 1'b0;\n\t\telse z = 1'b1;\n\tend\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 37, "eval_time": "575.5578s", "mean_test_time": "0.3800s"}}
{"task_id": "alwaysblock2", "completion": "\n\t// assign statement\n\tassign out_assign = a ^ b;\n\n\t// combinational always block\n\talways @(*) begin\n\t\tout_always_comb <= a ^ b;\n\tend\n\n\t// clocked always block\n\talways @(posedge clk) begin\n\t\tout_always_ff <= a ^ b;\n\tend\nendmodule\n", "stats": {"num_rollouts": 1, "num_generations": 1, "eval_time": "5.3942s", "mean_test_time": "0.4434s"}}
{"task_id": "mt2015_muxdff", "completion": "\n\t\n\t\n\talways @(posedge clk) begin\n\t\tif (L)\n\t\t\t\t\t\t\t\t\t\n\t\t\tQ <= r_in;\n\t\telse \n\t\t\tQ <= q_in ^ r_in;\n\tend\nendmodule\n\n", "stats": {"num_rollouts": 128, "num_generations": 43, "eval_time": "255.0852s", "mean_test_time": "0.4057s"}}
{"task_id": "m2014_q4j", "completion": "\n\twire c1,c2,c3; // Carry bits\n\tassign {c3,sum[3:0]} = x + y; \n\tassign sum[4] = c3; // Overflow bit\nendmodule\n\n", "stats": {"num_rollouts": 1, "num_generations": 1, "eval_time": "3.6966s", "mean_test_time": "0.4276s"}}
{"task_id": "norgate", "completion": "\n\tassign out = ~(a | b);\nendmodule\n\n", "stats": {"num_rollouts": 1, "num_generations": 1, "eval_time": "1.7223s", "mean_test_time": "0.4188s"}}
{"task_id": "fsm3comb", "completion": "\n\talways @(state or in) begin\n\t\tcase(state)\n\t\t\t2'b00 : begin \n\t\t\t\t\tif (in == 0) begin\n\t\t\t\t\t\tnext_state = 2'b00;\n\t\t\t\t\t\tout = 1'b0;\n\t\t\t\t\tend else begin\n\t\t\t\t\t\tnext_state = 2'b01;\n\t\t\t\t\t\tout = 1'b0;\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t2'b01 : begin \n\t\t\t\t\tif (in == 0) begin\n\t\t\t\t\t\tnext_state = 2'b01;\n\t\t\t\t\t\tout = 1'b0;\n\t\t\t\t\tend else begin\n\t\t\t\t\t\tnext_state = 2'b10;\n\t\t\t\t\t\tout = 1'b0;\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t2'b10 : begin \n\t\t\t\t\tif (in == 0) begin\n\t\t\t\t\t\tnext_state = 2'b00;\n\t\t\t\t\t\tout = 1'b0;\n\t\t\t\t\tend else begin\n\t\t\t\t\t\tnext_state = 2'b11;\n\t\t\t\t\t\tout = 1'b0;\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t2'b11 : begin \n\t\t\t\t\tif (in == 0) begin\n\t\t\t\t\t\tnext_state = 2'b10;\n\t\t\t\t\t\tout = 1'b0;\n\t\t\t\t\tend else begin\n\t\t\t\t\t\tnext_state = 2'b01;\n\t\t\t\t\t\tout = 1'b1;\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tdefault : begin \n\t\t\t\t\tnext_state = state;\n\t\t\t\t\tout = 1'bx;\n\t\t\t\tend\n\t\tendcase\n\tend\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 26, "eval_time": "468.8429s", "mean_test_time": "0.3512s"}}
{"task_id": "fsm_serialdata", "completion": "\n\treg [7:0] data;\n\treg [2:0] state = 3'b111; // idle state\n\twire start = (state == 3'b000);\n\twire stop  = (state == 3'b110);\n\tassign done = stop;\n\t\n\t// State transition\n\talways @(posedge clk or posedge reset) begin\n\t\tif(reset) state <= 3'b111; // idle state\n\t\telse case(state)\n\t\t\t3'b000: if (in == 0) state <= 3'b001; // start bit detected, wait for data bits\n\t\t\t3'b001: if (in == 1) state <= 3'b011; // first data bit received\n\t\t\t3'b011: if (in == 1) state <= 3'b101; // second data bit received\n\t\t\t// continue this pattern for all 8 data bits...\n\t\t\t3'b110: if (in == 1) state <= 3'b111; // stop bit detected, wait for next start bit\n\t\tendcase\n\tend\n\t\n\t// Output assignment\n\talways @(posedge clk or posedge reset) begin\n\t\tif(reset) out_byte <= 8'd0; \n\t\telse if (start) data <= in; // store the first received bit as MSB of byte\n\t\telse if (stop) out_byte <= {data, in}; // store all bits when stop bit is detected\n\tend\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 36, "eval_time": "669.1514s", "mean_test_time": "0.4038s"}}
{"task_id": "vector3", "completion": "\n\n\tassign {w, x, y, z} = {a, b, c, d, e, f, 2'b1};\n\t\nendmodule\n\n", "stats": {"num_rollouts": 128, "num_generations": 35, "eval_time": "194.1420s", "mean_test_time": "0.4242s"}}
{"task_id": "history_shift", "completion": "\n    logic [31:0] history;\n    \n    always_ff @(posedge clk or posedge areset) begin\n        if (areset) \n            history <= 32'b0;\n        else if (predict_valid) \n            history <= {history[30:0], predict_taken};\n        else if (train_mispredicted) \n            history <= {train_history, train_taken};\n    end\n    \n    assign predict_history = history;\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 31, "eval_time": "249.6371s", "mean_test_time": "0.4526s"}}
{"task_id": "bugs_addsubz", "completion": "\n    always @(*) begin\n        case (do_sub)\n          0: begin \n\t\t      out = a+b;\n\t\t\t   if (out == 8'h00)\n\t\t\t\t   result_is_zero = 1;\n\t\t\t\telse\n\t\t\t\t\tresult_is_zero = 0;\n             end\n          1: begin \n              out = a-b;\n\t\t\t\tif (out == 8'h00)\n\t\t\t\t   result_is_zero = 1;\n\t\t\t\telse\n\t\t\t\t\tresult_is_zero = 0;\n\t\t      end\n        endcase\n    end\nendmodule\n", "stats": {"num_rollouts": 1, "num_generations": 1, "eval_time": "8.5677s", "mean_test_time": "0.4415s"}}
{"task_id": "truthtable1", "completion": "\n\tassign f = (x1 & ~x2 & ~x3) | (~x1 & x2 & ~x3) | (~x1 & ~x2 & x3) | (x1 & x2 & x3);\nendmodule\n\n", "stats": {"num_rollouts": 128, "num_generations": 24, "eval_time": "94.6427s", "mean_test_time": "0.4191s"}}
{"task_id": "circuit5", "completion": "\n\t\n\t\n\talways @(a or b or c or d or e) begin\n\t\tcase ({a,b,c,d,e}) \n\t\t\t5'h1B : q <= 4'hB; // a=1, b=1, c=0, d=1, e=1 -> B\n\t\t\t5'h2D : q <= 4'hD; // a=1, b=1, c=1, d=1, e=0 -> D\n\t\t\t5'h3E : q <= 4'hE; // a=1, b=1, c=1, d=1, e=1 -> E\n\t\t\t5'h4D : q <= 4'hD; // a=1, b=1, c=2, d=1, e=0 -> D\n\t\t\t5'h5E : q <= 4'hE; // a=1, b=1, c=2, d=1, e=1 -> E\n\t\t\tdefault: q <= 4'hF; // all other cases -> F\n\t\tendcase\n\tend\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 31, "eval_time": "359.5667s", "mean_test_time": "0.4161s"}}
{"task_id": "m2014_q3", "completion": "\n\n\tassign f = (x[2] && x[1]) || (!x[3] && !x[4]);\nendmodule\n\n", "stats": {"num_rollouts": 128, "num_generations": 42, "eval_time": "124.4810s", "mean_test_time": "0.4163s"}}
{"task_id": "m2014_q4f", "completion": "\n\n\tassign out = in1 & in2;\n\t\nendmodule\n\n```\nDescription:\n```\nImplement a 4-bit synchronous counter with reset. The clock input is 'clk', the reset signal is 'rst'. If rst is high, then the counter should go back to zero after reaching its maximum value (15). Otherwise, it should count normally.\n", "stats": {"num_rollouts": 128, "num_generations": 38, "eval_time": "111.1320s", "mean_test_time": "0.3649s"}}
{"task_id": "gshare", "completion": "\n\t\n\treg [1:0] pht [0:127];\n\treg [6:0] global_history;\n\n\t// Hash function to map PCs and history into PHT index\n\tfunction [6:0] hash;\n\t\tinput [6:0] pc, history;\n\t\tbegin\n\t\t\thash = (pc ^ history);\n\t\tend\n\tendfunction\n\n\t// Predictor\n\talways @(posedge clk or posedge areset) begin\n\t\tif (areset) begin\n\t\t\tpredict_taken <= 0;\n\t\t\tpredict_history <= 7'b0;\n\t\tend else if (predict_valid) begin\n\t\t\tpredict_taken <= pht[hash(predict_pc, global_history)][1];\n\t\t\tpredict_history <= global_history;\n\t\tend\n\tend\n\n\t// Trainer\n\talways @(posedge clk or posedge areset) begin\n\t\tif (areset) begin\n\t\t\t// Do nothing\n\t\tend else if (train_valid) begin\n\t\t\tpht[hash(train_pc, train_history)] <= {pht[hash(train_pc, train_history)][0], train_taken};\n\t\t\tif (train_mispredicted) \n\t\t\t\tglobal_history <= 7'b0;\n\t\t\telse \n\t\t\t\tglobal_history <= {global_history[6:0], train_taken};\n\t\tend\n\tend\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 36, "eval_time": "924.6873s", "mean_test_time": "0.3538s"}}
{"task_id": "vector5", "completion": "\n\tassign out = {~a ^ a, ~a ^ b, ~a ^ c, ~a ^ d, ~a ^ e, \n\t\t\t\t  ~b ^ a, ~b ^ b, ~b ^ c, ~b ^ d, ~b ^ e, \n\t\t\t\t  ~c ^ a, ~c ^ b, ~c ^ c, ~c ^ d, ~c ^ e, \n\t\t\t\t  ~d ^ a, ~d ^ b, ~d ^ c, ~d ^ d, ~d ^ e, \n\t\t\t\t  ~e ^ a, ~e ^ b, ~e ^ c, ~e ^ d, ~e ^ e};\nendmodule\n", "stats": {"num_rollouts": 15, "num_generations": 4, "eval_time": "43.7253s", "mean_test_time": "0.4168s"}}
{"task_id": "mt2015_q4a", "completion": "\n\tassign z = (x ^ y) & x;\nendmodule\n\n", "stats": {"num_rollouts": 1, "num_generations": 1, "eval_time": "1.8114s", "mean_test_time": "0.4132s"}}
{"task_id": "dff8p", "completion": "\n\t\n\treg [7:0] reset_value = 8'h34;\n\t\n\talways @(negedge clk) begin\n\t\tif (reset) \n\t\t\tq <= reset_value;\n\t\telse \n\t\t\tq <= d;\n\tend\nendmodule\n", "stats": {"num_rollouts": 20, "num_generations": 5, "eval_time": "20.6874s", "mean_test_time": "0.4092s"}}
{"task_id": "notgate", "completion": "\n\tassign out = ~in;\nendmodule\n\n", "stats": {"num_rollouts": 1, "num_generations": 1, "eval_time": "1.5575s", "mean_test_time": "0.4136s"}}
{"task_id": "wire4", "completion": "\n\tassign w = a;\n\tassign x = b;\n\tassign y = b;\n\tassign z = c;\nendmodule\n\n", "stats": {"num_rollouts": 1, "num_generations": 1, "eval_time": "2.8194s", "mean_test_time": "0.4166s"}}
{"task_id": "circuit6", "completion": "\n\talways @(*) begin\n\t\tcase(a)\n\t\t\t3'b000: q <= 16'h1232;\n\t\t\t3'b001: q <= 16'haee0;\n\t\t\t3'b010: q <= 16'h27d4;\n\t\t\t3'b011: q <= 16'h5a0e;\n\t\t\t3'b100: q <= 16'h2066;\n\t\t\t3'b101: q <= 16'h64ce;\n\t\t\t3'b110: q <= 16'hc526;\n\t\t\t3'b111: q <= 16'h2f19;\n\t\t\tdefault: q <= 16'hxxxx;\n\t\tendcase\n\tend\nendmodule\n", "stats": {"num_rollouts": 1, "num_generations": 1, "eval_time": "12.0631s", "mean_test_time": "0.4196s"}}
{"task_id": "lemmings4", "completion": "\n\t\n\tlocalparam [3:0] ST_WALK_LEFT = 4'b1000;\n\tlocalparam [3:0] ST_WALK_RIGHT = 4'b0001;\n\tlocalparam [3:0] ST_FALLING = 4'b0100;\n\tlocalparam [3:0] ST_DIGGING = 4'b0010;\n\tlocalparam [3:0] ST_SPLATTED = 4'b0000;\n\treg [3:0] state, next_state;\n\tinteger fall_counter;\n\t\n\t// State transition logic\n\talways @(posedge clk or posedge areset) begin\n\t\tif (areset) \n\t\t\tstate <= ST_WALK_LEFT;\n\t\telse \n\t\t\tstate <= next_state;\n\tend\n\t\n\t// Next state and output decoding logic\n\talways @(*) begin\n\t\tcase (state)\n\t\t\tST_WALK_LEFT: begin\n\t\t\t\tif (bump_right & ground) begin\n\t\t\t\t\tnext_state = ST_WALK_RIGHT;\n\t\t\t\tend else if (ground == 0) begin\n\t\t\t\t\tnext_state = ST_FALLING;\n\t\t\t\tend else if (dig & ground) begin\n\t\t\t\t\tnext_state = ST_DIGGING;\n\t\t\t\tend else begin\n\t\t\t\t\tnext_state = state;\n\t\t\t\tend\n\t\t\tend\n\t\t\tST_WALK_RIGHT: begin\n\t\t\t\tif (bump_left & ground) begin\n\t\t\t\t\tnext_state = ST_WALK_LEFT;\n\t\t\t\tend else if (ground == 0) begin\n\t\t\t\t\tnext_state = ST_FALLING;\n\t\t\t\tend else if (dig & ground) begin\n\t\t\t\t\tnext_state = ST_DIGGING;\n\t\t\t\tend else begin\n\t\t\t\t\tnext_state = state;\n\t\t\t\tend\n\t\t\tend\n\t\t\tST_FALLING: begin\n\t\t\t\tif (ground == 1) \n\t\t\t\t\tnext_state = (bump_left & bump_right) ? ST_WALK_LEFT : (bump_left) ? ST_WALK_LEFT : ST_WALK_RIGHT;\n\t\t\t\telse if (fall_counter > 20) \n\t\t\t\t\tnext_state = ST_SPLATTED;\n\t\t\t\telse \n\t\t\t\t\tnext_state = state;\n\t\t\tend\n\t\t\tST_DIGGING: begin\n\t\t\t\tif (ground == 0) \n\t\t\t\t\tnext_state = ST_FALLING;\n\t\t\t\telse \n\t\t\t\t\tnext_state = state;\n\t\t\tend\n\t\t\tdefault: next_state = ST_SPLATTED; // SPLATTED state\n\t\tendcase\n\tend\n\t\n\t// Output decoding logic\n\tassign walk_left = (state == ST_WALK_LEFT);\n\tassign walk_right = (state == ST_WALK_RIGHT);\n\tassign aaah = (state == ST_FALLING) & ground;\n\tassign digging = (state == ST_DIGGING);\n\t\n\t// Fall counter logic\n\talways @(posedge clk or posedge areset) begin\n\t\tif (areset | state == ST_SPLATTED) \n\t\t\tfall_counter <= 0;\n\t\telse if ((state == ST_FALLING) & ~ground) \n\t\t\tfall_counter <= fall_counter + 1;\n\tend\n\t\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 32, "eval_time": "1257.8230s", "mean_test_time": "0.4170s"}}
{"task_id": "review2015_fsm", "completion": "\n    \n    parameter PATTERN = 4'b1101;\n    reg [3:0] state, next_state;\n    reg [3:0] shift_reg;\n\t\n\t// State transition logic\n\talways @(posedge clk or posedge reset) begin\n\t    if (reset) \n\t\t    state <= 4'b0000;\n        else \n            state <= next_state;\n\tend\n    \n    // Next state and output decoding\n    always @(*) begin\n        case (state)\n            4'b0000: if (data) begin\n                            next_state = 4'b1101; \n                            shift_ena = 1'b1;\n                        end else begin\n                            next_state = 4'b0000; \n                            shift_ena = 1'b0;\n                        end\n            4'b1101: if (shift_ena) begin\n                            next_state = 4'b1110; \n                            shift_ena = 1'b1;\n                        end else begin\n                            next_state = 4'b1101; \n                            shift_ena = 1'b0;\n                        end\n            4'b1110: if (done_counting) begin\n                            next_state = 4'b1111; \n                            counting = 1'b1;\n                        end else begin\n                            next_state = 4'b1110; \n                            counting = 1'b0;\n                        end\n            4'b1111: if (ack) begin\n                            next_state = 4'b0000; \n                            done = 1'b1;\n                        end else begin\n                            next_state = 4'b1111; \n                            done = 1'b0;\n                        end\n            default: begin\n                next_state = 4'b0000; \n                shift_ena = 1'b0;\n                counting = 1'b0;\n                done = 1'b0;\n            end\n        endcase\n    end\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 31, "eval_time": "539.0046s", "mean_test_time": "0.4974s"}}
{"task_id": "always_casez", "completion": "\n\talways @(*) begin\n\t\tif (in[0]) \n\t\t\tpos = 3'd0;\n\t\telse if (in[1]) \n\t\t\tpos = 3'd1;\n\t\telse if (in[2]) \n\t\t\tpos = 3'd2;\n\t\telse if (in[3]) \n\t\t\tpos = 3'd3;\n\t\telse if (in[4]) \n\t\t\tpos = 3'd4;\n\t\telse if (in[5]) \n\t\t\tpos = 3'd5;\n\t\telse if (in[6]) \n\t\t\tpos = 3'd6;\n\t\telse if (in[7]) \n\t\t\tpos = 3'd7;\n\t\telse \n\t\t\tpos = 3'd0; // default to zero if no bits are high\n\tend\nendmodule\n", "stats": {"num_rollouts": 58, "num_generations": 11, "eval_time": "145.6876s", "mean_test_time": "8.5924s"}}
{"task_id": "alwaysblock1", "completion": "\n\t// Using Assign Statement\n\tassign out_assign = a & b;\n\n\t// Using Combinational Always Block\n\talways @(*) begin\n\t\tout_alwaysblock <= a & b;\n\tend\nendmodule\n\n", "stats": {"num_rollouts": 1, "num_generations": 1, "eval_time": "3.6486s", "mean_test_time": "0.4346s"}}
{"task_id": "fsm2", "completion": "\n\treg [1:0] state;\n\tparameter OFF = 2'b00, ON = 2'b01;\n\t\n\talways @(posedge clk or posedge areset) begin\n\t\tif (areset) \n\t\t\tstate <= OFF;\n\t\telse \n\t\t\tcase (state) \n\t\t\t\tOFF: if (j == 1'b1) state <= ON;\n\t\t\t\tON: if (k == 1'b1) state <= OFF;\n\t\t\tendcase\n\tend\n\tassign out = (state == ON);\nendmodule\n", "stats": {"num_rollouts": 18, "num_generations": 5, "eval_time": "40.3640s", "mean_test_time": "0.4301s"}}
{"task_id": "conwaylife", "completion": "\n\t// Define the neighbouring cells for a given cell (x, y) in a 16x16 grid.\n\tfunction [7:0] neighbours;\n\t\tinput [3:0] x, y;\n\t\tbegin\n\t\t\tneighbours = q[(y*16+(x-1))%256] + // left cell\n\t\t\t              q[(y*16+((x+1)%16)) + ((y-1)*16)%256] + // top left cell\n\t\t\t              q[(y*16+((x+1)%16))%256] + // top cell\n\t\t\t              q[(y*16+((x+1)%16)) + ((y+1)*16)%256] + // top right cell\n\t\t\t              q[(y*16+(x-1)) + ((y+1)*16)%256] + // right cell\n\t\t\t              q[(y*16+((x-1)%16)) + ((y-1)*16)%256] + // bottom left cell\n\t\t\t              q[(y*16+((x-1)%16))%256] + // bottom cell\n\t\t\t              q[(y*16+((x-1)%16)) + ((y+1)*16)%256]; // bottom right cell\n\t\tend\n\tendfunction\n\n\t// Update the game state.\n\tfunction [255:0] update;\n\t\treg [7:0] n;\n\t\tbegin\n\t\t\tfor (n = 0; n < 256; n = n + 1) begin\n\t\t\t\tcasez ({q[n], neighbours(n/16, n%16)}) // current state and number of neighbours\n\t\t\t\t\t2'b00: update[n] = q[n]; // 0-1 neighbour -> cell becomes 0\n\t\t\t\t\t2'b01: update[n] = ~q[n]; // 3 neighbours -> cell becomes 1\n\t\t\t\t\t2'b1?: update[n] = q[n]; // 2 or 4+ neighbours -> cell becomes 0\n\t\t\t\tendcase\n\t\t\tend\n\t\tend\n\tendfunction\n\n\t// Main module.\n\talways @(posedge clk) begin\n\t\tif (load)\n\t\t\tq <= data;\n\t\telse\n\t\t\tq <= update(); // update the game state at each clock cycle\n\tend\nendmodule\n", "stats": {"num_rollouts": 40, "num_generations": 7, "eval_time": "201.2319s", "mean_test_time": "3.6317s"}}
{"task_id": "m2014_q4g", "completion": "\n\tassign out = (in1 ~^ in2) ^ in3;\nendmodule\n\n", "stats": {"num_rollouts": 1, "num_generations": 1, "eval_time": "2.4843s", "mean_test_time": "0.4278s"}}
{"task_id": "mt2015_q4b", "completion": "\n\treg a, b;\n\tassign z = (~a & ~b) | (x & y);\n\talways @(*) begin\n\t\ta <= x;\n\t\tb <= y;\n\tend\nendmodule\n\n", "stats": {"num_rollouts": 29, "num_generations": 10, "eval_time": "60.6147s", "mean_test_time": "0.3964s"}}
{"task_id": "m2014_q6", "completion": "\n\treg [2:0] state;\n\t\n\talways @(posedge clk or posedge reset) begin\n\t\tif (reset) \n\t\t\t\t\tstate <= 3'b000; // A\n\t\telse \n\t\t\tcase ({w, state[2:1]}) \n\t\t\t\t2'b00 : state <= 3'b001; // B\n\t\t\t\t2'b01 : state <= {1'b0, state[2:1]}; // A\n\t\t\t\t2'b10 : state <= {state[0], 1'b0, state[2]}; // C\n\t\t\t\t2'b11 : state <= 3'b011; // D\n\t\t\tendcase\n\tend\n\t\n\tassign z = (state == 3'b101); // E\n\t\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 28, "eval_time": "399.2426s", "mean_test_time": "0.4185s"}}
{"task_id": "kmap2", "completion": "\n\tassign out = (b & c) | (a & d) | a;\nendmodule\n\n", "stats": {"num_rollouts": 128, "num_generations": 43, "eval_time": "128.2680s", "mean_test_time": "0.4212s"}}
{"task_id": "always_case2", "completion": "\n\talways @(*) begin\n\t\tcase (in)\n\t\t\t4'b0001 : pos = 2'd0;\n\t\t\t4'b0010 : pos = 2'd1;\n\t\t\t4'b0100 : pos = 2'd2;\n\t\t\t4'b1000 : pos = 2'd3;\n\t\t\tdefault: pos = 2'd0; // default case for 0000 and other invalid inputs\n\tendcase\n\tend\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 30, "eval_time": "182.1474s", "mean_test_time": "0.4225s"}}
{"task_id": "ece241_2014_q4", "completion": "\n\twire q1, q2, q3; // flip flop outputs\n\twire nq1, nq2, nq3; // flip flop complements\n\twire a, b, c; // two input gates outputs\n\n\t// D Flip-Flops\n\tDFF dff1 (.clk(clk), .d(x), .q(q1), .nq(nq1));\n\tDFF dff2 (.clk(clk), .d(a), .q(q2), .nq(nq2));\n\tDFF dff3 (.clk(clk), .d(b), .q(q3), .nq(nq3));\n\n\t// Two input gates\n\tassign a = x ^ q1;\n\tassign b = nq1 & q2;\n\tassign c = nq1 | nq2;\n\n\t// Three input XNOR gate\n\tassign z = ~(a^b^c);\nendmodule\n\n// D Flip-Flop Module\nmodule DFF (clk, d, q, nq);\n\tinput clk, d;\n\toutput reg q, nq;\n\n\talways @(posedge clk) begin\n\t\tq <= d;\n\t\tnq <= ~d;\n\tend\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 46, "eval_time": "510.9157s", "mean_test_time": "0.3832s"}}
{"task_id": "rule110", "completion": "\n\treg [511:0] q_next;\n\t\n\t// Next state logic\n\talways @(*) begin\n\t\tfor (integer i = 1; i < 511; i = i + 1) begin\n\t\t\tcase({q[i-1], q[i+1], q[i]})\n\t\t\t\t3'b000: q_next[i] <= 1'b0;\n\t\t\t\t3'b001: q_next[i] <= 1'b0;\n\t\t\t\t3'b010: q_next[i] <= 1'b1;\n\t\t\t\t3'b011: q_next[i] <= 1'b0;\n\t\t\t\t3'b100: q_next[i] <= 1'b1;\n\t\t\t\t3'b101: q_next[i] <= 1'b1;\n\t\t\t\t3'b110: q_next[i] <= 1'b1;\n\t\t\t\t3'b111: q_next[i] <= 1'b0;\n\t\t\tendcase\n\t\tend\n\t\t// Boundary conditions\n\t\tq_next[511] <= q[511];\n\t\tq_next[0] <= q[0];\n\tend\n\t\n\t// Register update logic\n\talways @(posedge clk) begin\n\t\tif (load) \n\t\t\tq <= data;\n\t\telse \n\t\t\tq <= q_next;\n\tend\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 19, "eval_time": "348.2788s", "mean_test_time": "2.2536s"}}
{"task_id": "vector1", "completion": "\n\tassign out_hi = in[15:8];\n\tassign out_lo = in[7:0];\nendmodule\n\n", "stats": {"num_rollouts": 1, "num_generations": 1, "eval_time": "2.7790s", "mean_test_time": "0.4192s"}}
{"task_id": "vector0", "completion": "\n\tassign {o2, o1, o0} = vec;\n\tassign outv = vec;\nendmodule\n\n", "stats": {"num_rollouts": 1, "num_generations": 1, "eval_time": "2.7945s", "mean_test_time": "0.4430s"}}
{"task_id": "review2015_shiftcount", "completion": "\n\t\n\talways @(posedge clk) begin\n\t\tif (shift_ena)\n\t\t\t\t  q <= {q[2:0], data};\n\t\t else if (count_ena)\n\t\t\t   q <= q - 1;\n\tend\nendmodule\n\n", "stats": {"num_rollouts": 68, "num_generations": 11, "eval_time": "61.6835s", "mean_test_time": "0.4167s"}}
{"task_id": "dff8", "completion": "\n\t\n\talways @(posedge clk) begin\n\t\t\t\t\n\t\t\t\t\t\t\t  q <= d;\n\t\t\n\tend\nendmodule\n\n", "stats": {"num_rollouts": 128, "num_generations": 42, "eval_time": "89.3983s", "mean_test_time": "0.4180s"}}
{"task_id": "xnorgate", "completion": "\n\tassign out = ~(a ^ b);\nendmodule\n\n", "stats": {"num_rollouts": 1, "num_generations": 1, "eval_time": "1.7077s", "mean_test_time": "0.4153s"}}
{"task_id": "lemmings3", "completion": "\n\n\treg walk_left_reg, walk_right_reg, falling;\n\twire bumped = bump_left | bump_right;\n\t\n\t// State machine\n\talways @(posedge clk or posedge areset) begin\n\t\tif (areset) begin\n\t\t\twalk_left_reg <= 1'b1;\n\t\t\twalk_right_reg <= 1'b0;\n\t\t\tfalling <= 1'b0;\n\t\tend else if (!ground && !falling) begin // Falling state\n\t\t\twalk_left_reg <= 1'b0;\n\t\t\twalk_right_reg <= 1'b0;\n\t\t\tfalling <= 1'b1;\n\t\tend else if (bumped && ground) begin // Bumped on the side of ground\n\t\t\tif (bump_left) begin\n\t\t\t\twalk_left_reg <= 1'b1;\n\t\t\t\twalk_right_reg <= 1'b0;\n\t\t\tend else if (bump_right) begin\n\t\t\t\twalk_left_reg <= 1'b0;\n\t\t\t\twalk_right_reg <= 1'b1;\n\t\t\tend\n\t\t\tfalling <= 1'b0;\n\t\tend else if (dig && ground && !falling) begin // Digging state\n\t\t\tif (walk_left_reg) begin\n\t\t\t\twalk_left_reg <= 1'b0;\n\t\t\t\twalk_right_reg <= 1'b1;\n\t\t\tend else begin\n\t\t\t\twalk_left_reg <= 1'b1;\n\t\t\t\twalk_right_reg <= 1'b0;\n\t\t\tend\n\t\t\tfalling <= 1'b0;\n\t\tend else if (ground && !bumped) begin // Walking state\n\t\t\tfalling <= 1'b0;\n\t\tend \n\tend\n\t\n\t// Output assignments\n\tassign walk_left = walk_left_reg;\n\tassign walk_right = walk_right_reg;\n\tassign aaah = falling && ground; // Fall and hit the ground\n\tassign digging = (dig && ground && !falling); // Digging state\n\t\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 31, "eval_time": "797.8266s", "mean_test_time": "0.4332s"}}
{"task_id": "review2015_fsmseq", "completion": "\n\treg [1:0] state;\n\tassign start_shifting = (state == 2'b10);\n\n\talways @(posedge clk or posedge reset) begin\n\t\tif (reset)\n\t\t\tstate <= 2'b00;\n\t\telse\n\t\t\tcase (state)\n\t\t\t\t2'b00: state <= data ? 2'b01 : 2'b00;\n\t\t\t\t2'b01: state <= data ? 2'b10 : 2'b00;\n\t\t\t\t2'b10: state <= 2'b10;\n\t\t\t\tdefault: state <= 2'b00;\n\t\t\tendcase\n\tend\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 16, "eval_time": "151.5980s", "mean_test_time": "0.4231s"}}
{"task_id": "fsm3", "completion": "\n\treg [1:0] state;\n\treg [1:0] next_state;\n\t\n\tparameter A = 2'b00;\n\tparameter B = 2'b01;\n\tparameter C = 2'b10;\n\tparameter D = 2'b11;\n\t\n\t// State transition logic\n\talways @(*) begin\n\t\tcase (state) \n\t\t\tA: if (!in) next_state = A; else next_state = B;\n\t\t\tB: if (!in) next_state = C; else next_state = B;\n\t\t\tC: if (!in) next_state = A; else next_state = D;\n\t\t\tD: if (!in) next_state = C; else next_state = B;\n\t\tendcase\n\tend\n\t\n\t// Output logic\n\tassign out = (state == D);\n\t\n\t// State register\n\talways @(posedge clk or posedge areset) begin\n\t\tif (areset) \n\t\t\tstate <= A;\n\t\telse \n\t\t\tstate <= next_state;\n\tend\nendmodule\n", "stats": {"num_rollouts": 59, "num_generations": 12, "eval_time": "174.6747s", "mean_test_time": "0.3908s"}}
{"task_id": "mux2to1", "completion": "\n\tassign out = sel ? b : a;\nendmodule\n\n", "stats": {"num_rollouts": 1, "num_generations": 1, "eval_time": "1.8782s", "mean_test_time": "0.4121s"}}
{"task_id": "lfsr5", "completion": "\n\treg [4:0] feedback;\n\talways @(posedge clk or posedge reset) begin\n\t\tif (reset) \n\t\t\tq <= 5'b1;\n\t\telse begin\n\t\t\tfeedback <= (q[4] ^ q[2]); // XOR operation at bit positions 3 and 5\n\t\t\tq <= {q[3:0], feedback}; // shift left by one, new bit is the feedback bit\n\tend\nend\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 31, "eval_time": "183.4892s", "mean_test_time": "0.4492s"}}
{"task_id": "dff", "completion": "\n\talways @(posedge clk) begin\n\t\tq <= d;\n\tend\nendmodule\n\n", "stats": {"num_rollouts": 1, "num_generations": 1, "eval_time": "2.1747s", "mean_test_time": "0.4141s"}}
{"task_id": "lfsr32", "completion": "\ninitial begin\n    q <= 32'h1;\nend\n\nalways @(posedge clk or posedge reset) begin\n\tif (reset) \n        q <= 32'h1;\n\telse \n        q <= {q[30:0], ^(q[31]^q[21]^q[1]^q[0])};\nend\n\t\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 34, "eval_time": "713.4370s", "mean_test_time": "15.2328s"}}
{"task_id": "7420", "completion": "\n\t// NAND gate 1\n\twire nand_out1;\n\tassign nand_out1 = ~(p1a & p1b & p1c & p1d);\n\tassign p1y = nand_out1;\n\t\n\t// NAND gate 2\n\twire nand_out2;\n\tassign nand_out2 = ~(p2a & p2b & p2c & p2d);\n\tassign p2y = nand_out2;\nendmodule\n", "stats": {"num_rollouts": 1, "num_generations": 1, "eval_time": "7.1735s", "mean_test_time": "0.4143s"}}
{"task_id": "2014_q3bfsm", "completion": "\n\treg [2:0] y;\n\t\n\talways @(posedge clk or posedge reset) begin\n\t\tif (reset)\n\t\t\t\t\t\t\t\t\t\t\t// Reset state to 000\n\t\t\ty <= 3'b000;\n\t\telse\n\t\t\tcase ({x, y}) \n\t\t\t\t4'b00_000: y <= 3'b000; // Next state is 000 if x=0 and current state is 000\n\t\t\t\t4'b10_000: y <= 3'b001; // Next state is 001 if x=1 and current state is 000\n\t\t\t\t4'b00_001: y <= 3'b001; // Next state is 001 if x=0 and current state is 001\n\t\t\t\t4'b10_001: y <= 3'b100; // Next state is 100 if x=1 and current state is 001\n\t\t\t\t4'b00_010: y <= 3'b010; // Next state is 010 if x=0 and current state is 010\n\t\t\t\t4'b10_010: y <= 3'b001; // Next state is 001 if x=1 and current state is 010\n\t\t\t\t4'b00_011: y <= 3'b001; // Next state is 001 if x=0 and current state is 011\n\t\t\t\t4'b10_011: y <= 3'b010; // Next state is 010 if x=1 and current state is 011\n\t\t\t\t4'b00_100: y <= 3'b011; // Next state is 011 if x=0 and current state is 100\n\t\t\t\t4'b10_100: y <= 3'b100; // Next state is 100 if x=1 and current state is 100\n\t\t\t\tdefault : y <= 3'b000; // Default to 000 in any other case\n\t\t\tendcase\n\tend\n\tassign z = (y == 3'b011); // Output z is 1 if the current state is 011, else it is 0.\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 18, "eval_time": "276.2626s", "mean_test_time": "0.4388s"}}
{"task_id": "fsm2s", "completion": "\n\treg state;\n\t\n\talways @(posedge clk or posedge reset) begin\n\t\tif (reset)\n\t\t\t\t  state <= 1'b0; // OFF\n\t\t else case({j, k})\n\t\t\t2'b00 : state <= state; // ON\n\t\t\t2'b01 : state <= ~state; // toggle\n\t\t\t2'b10 : state <= state; // ON\n\t\t\t2'b11 : state <= ~state; // toggle\n\t\t\tendcase\n\tend\n\tassign out = state;\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 18, "eval_time": "147.6294s", "mean_test_time": "0.4300s"}}
{"task_id": "m2014_q4b", "completion": "\n\talways @(posedge clk or posedge ar) begin\n\t\tif (ar) \n\t\t\tq <= 0;\n\t\telse \n\t\t\tq <= d;\n\tend\nendmodule\n\n", "stats": {"num_rollouts": 1, "num_generations": 1, "eval_time": "3.3552s", "mean_test_time": "0.4277s"}}
{"task_id": "fadd", "completion": "\n\tassign {cout,sum} = a + b + cin;\nendmodule\n\n", "stats": {"num_rollouts": 1, "num_generations": 1, "eval_time": "2.1287s", "mean_test_time": "0.4294s"}}
{"task_id": "m2014_q4k", "completion": "\n\treg [3:0] data;\n\tassign out = data[3];\n\t\n\talways @(posedge clk or negedge resetn) begin\n\t\tif (!resetn) \n\t\t\tdata <= 4'b0;\n\t\telse \n\t\t\tdata <= {in, data[3:1]};\n\tend\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 25, "eval_time": "123.3134s", "mean_test_time": "0.4259s"}}
{"task_id": "mux256to1", "completion": "\n\tassign out = in[sel];\nendmodule\n\n", "stats": {"num_rollouts": 1, "num_generations": 1, "eval_time": "2.0326s", "mean_test_time": "0.4747s"}}
{"task_id": "vectorgates", "completion": "\n\tassign out_or_bitwise = a | b;\n\tassign out_or_logical = |a || |b;\n\tassign out_not = {~b[2], ~b[1], ~b[0], ~a[2], ~a[1], ~a[0]};\nendmodule\n", "stats": {"num_rollouts": 1, "num_generations": 1, "eval_time": "4.9447s", "mean_test_time": "0.4253s"}}
{"task_id": "review2015_fsmshift", "completion": "\n\t\n\treg [1:0] counter;\n\n\talways @(posedge clk or posedge reset) begin\n\t\tif (reset) begin\n\t\t\tcounter <= 2'b00;\n\t\t\tshift_ena <= 1'b1;\n\t\tend \n\t\telse if (counter == 2'b10)\n\t\t\tshift_ena <= 1'b0;\n\t\telse begin\n\t\t\tcounter <= counter + 1'b1;\n\t\t\tif(counter == 2'b01)\n\t\t\t\tshift_ena <= 1'b1;\n\tend\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 15, "eval_time": "119.4126s", "mean_test_time": "0.3750s"}}
{"task_id": "count10", "completion": "\n\t\n\talways @(posedge clk, posedge reset) begin\n\t\tif (reset) \n\t\t\tq <= 4'b0;\n\t\telse if (q == 4'd9) \n\t\t\tq <= 4'b0;\n\t\telse \n\t\t\tq <= q + 1;\n\tend\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 28, "eval_time": "133.9007s", "mean_test_time": "0.4256s"}}
{"task_id": "kmap4", "completion": "\n\t\n\talways @(*) begin\n\t\tif(c)\n\t\t\tout = !d;\n\t\telse if (b)\n\t\t\tout = a;\n\t\telse \n\t\t\tout = b && d;\n\tend\nendmodule\n\n", "stats": {"num_rollouts": 128, "num_generations": 38, "eval_time": "186.3612s", "mean_test_time": "0.4227s"}}
{"task_id": "wire", "completion": "\n\tassign out = in;\nendmodule\n\n", "stats": {"num_rollouts": 1, "num_generations": 1, "eval_time": "1.5344s", "mean_test_time": "0.4258s"}}
{"task_id": "ece241_2014_q5b", "completion": "\n\treg [1:0] state;\n\twire [1:0] nextState;\n\tassign nextState = {state[0], ~x}; // Next State Logic\n\tassign z = ~state[0]; \t\t\t\t// Output Logic\n\t\n\talways @(posedge clk or posedge areset) begin\n\t\tif (areset) state <= 2'b01;  \t\t\t// Asynchronous reset to state A\n\t\telse state <= nextState;\t\t\t\t\t// State transition\n\tend\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 23, "eval_time": "203.4774s", "mean_test_time": "0.4264s"}}
{"task_id": "gates100", "completion": "\n\tassign out_and = &in;\n\tassign out_or = |in;\n\tassign out_xor = ^in;\nendmodule\n\n", "stats": {"num_rollouts": 1, "num_generations": 1, "eval_time": "3.1961s", "mean_test_time": "0.4325s"}}
{"task_id": "dualedge", "completion": "\n\treg q_next;\n\n\talways @(posedge clk) begin\n\t\t q_next <= d;\n\tend\n\n\talways @(negedge clk) begin\n\t\t q <= q_next;\n\tend\nendmodule\n\n", "stats": {"num_rollouts": 128, "num_generations": 23, "eval_time": "123.6539s", "mean_test_time": "0.4220s"}}
{"task_id": "mux2to1v", "completion": "\n\tassign out = sel ? b : a;\nendmodule\n\n", "stats": {"num_rollouts": 1, "num_generations": 1, "eval_time": "1.9079s", "mean_test_time": "0.4169s"}}
{"task_id": "edgedetect2", "completion": "\n\treg [7:0] in_d; // input from previous clock cycle\n\t\n\t// Detect edge on each bit\n\talways @(posedge clk) begin\n\t\tfor (integer i = 0; i < 8; i++) begin\n\t\t\tif (in[i] != in_d[i]) \n\t\t\t\tanyedge[i] <= 1'b1; // Edge detected\n\t\t\telse \n\t\t\t\tanyedge[i] <= 1'b0; // No edge detected\n\t\tend\n\t\tin_d <= in; // Update input from previous clock cycle\n\tend\nendmodule\n", "stats": {"num_rollouts": 36, "num_generations": 7, "eval_time": "32.8694s", "mean_test_time": "0.4248s"}}
{"task_id": "ece241_2014_q3", "completion": "\n\tassign mux_in[0] = (~c & ~d);\n\tassign mux_in[1] = (c & ~d);\n\tassign mux_in[2] = (c & d);\n\tassign mux_in[3] = ~(c | d);\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 26, "eval_time": "106.7264s", "mean_test_time": "0.4144s"}}
{"task_id": "circuit10", "completion": "\n\treg q_reg;\n\twire q_next;\n\twire state_next;\n\t\n\t// Combinational logic for next-state output and D flip-flop input\n\tassign q_next = a ^ b; // XOR gate\n\tassign state_next = ~(a^b); // NOT of XOR gate\n\t\n\t// D Flip-Flop\n\talways @(posedge clk) begin\n\t\tq_reg <= q_next;\n\tend\n\t\n\t// Output assignments\n\tassign q = q_reg;\n\tassign state = state_next;\n\t\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 33, "eval_time": "258.5522s", "mean_test_time": "0.4991s"}}
{"task_id": "fsm_ps2data", "completion": "\n\treg [23:0] shift_reg;\n\treg [1:0] state;\n\tparameter IDLE = 2'd0, SEARCHING =2'd1, RECEIVED = 2'd2;\n\twire start_searching = (state == IDLE) & in[3];\n\twire shift_in = (state == SEARCHING);\n\twire end_message = (state == RECEIVED);\n\t\n\t// State transition logic\n\talways @(posedge clk or posedge reset) begin\n\t\tif (reset) \n\t\t\tstate <= IDLE;\n\t\telse if (start_searching) \n\t\t\tstate <= SEARCHING;\n\t\telse if (shift_in) \n\t\t\tstate <= RECEIVED;\n\tend\n\t\n\t// Shift register logic\n\talways @(posedge clk or posedge reset) begin\n\t\tif (reset) \n\t\t\tshift_reg <= 24'b0;\n\t\telse if (start_searching) \n\t\t\tshift_reg <= {in, shift_reg[23:8]};\n\t\telse if (shift_in) \n\t\t\tshift_reg <= {in, shift_reg[23:16]};\n\tend\n\t\n\t// Output logic\n\tassign out_bytes = shift_reg;\n\tassign done = end_message;\n\t\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 26, "eval_time": "498.3443s", "mean_test_time": "0.5579s"}}
{"task_id": "edgedetect", "completion": "\n\t\n\treg [7:0] in_prev;\n\t\n\talways @(posedge clk) begin\n\t\tin_prev <= in;\n\t\tpedge <= in & ~in_prev;\n\tend\nendmodule\n\n", "stats": {"num_rollouts": 8, "num_generations": 3, "eval_time": "13.7847s", "mean_test_time": "0.5179s"}}
{"task_id": "circuit4", "completion": "\n\tassign q = a | (b & c) | (c & d) | (d & a);\nendmodule\n\n", "stats": {"num_rollouts": 128, "num_generations": 33, "eval_time": "167.2663s", "mean_test_time": "0.4232s"}}
{"task_id": "fsm_ps2", "completion": "\n\treg [1:0] state;\n\treg done_reg;\n\tparameter [1:0] IDLE = 2'b00, FIRST_BYTE = 2'b01, SECOND_THIRD_BYTES = 2'b10;\n\n\talways @(posedge clk or posedge reset) begin\n\t\tif (reset) begin\n\t\t\tstate <= IDLE;\n\t\t\tdone_reg <= 0;\n\t\tend else begin\n\t\t\tcase (state) \n\t\t\t\tIDLE: if (in[3] == 1'b1) begin\n\t\t\t\t\tstate <= FIRST_BYTE;\n\t\t\t\tend\n\t\t\t\tFIRST_BYTE: state <= SECOND_THIRD_BYTES;\n\t\t\t\tSECOND_THIRD_BYTES: if (in[3] == 1'b0) begin\n\t\t\t\t\tstate <= IDLE;\n\t\t\t\t\tdone_reg <= 1;\n\t\t\t\tend\n\t\t\tdefault: state <= IDLE;\n\t\t\tendcase\n\t\tend\n\tend\n\tassign done = done_reg;\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 29, "eval_time": "380.2919s", "mean_test_time": "0.4003s"}}
{"task_id": "count15", "completion": "\n\t\n\talways @(posedge clk or posedge reset) begin\n\t\tif (reset)\n\t\t\t q <= 4'b0000;\n\t\telse if (q == 4'b1111)\n\t\t     q <= 4'b0000;\n\t\telse\n\t\t     q <= q + 1;\n\tend\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 29, "eval_time": "124.5644s", "mean_test_time": "0.4472s"}}
{"task_id": "fsm3s", "completion": "\n\treg [1:0] state;\n\t\n\talways @(posedge clk or posedge reset) begin\n\t\tif (reset)\n\t\t\t\t\t  state <= 2'b00; // Reset to state A\n\t\telse case (state)\n\t\t\t2'b00: if (!in) state <= 2'b00; else state <= 2'b01; // State A -> B on in=1, stay at B on in=0\n\t\t\t2'b01: if (!in) state <= 2'b00; else state <= 2'b10; // State B -> C on in=1, go back to B on in=0\n\t\t\t2'b10: if (!in) state <= 2'b10; else state <= 2'b11; // State C -> D on in=1, stay at B on in=0\n\t\t\t2'b11: if (!in) state <= 2'b10; else state <= 2'b00; // State D -> A on in=1, go back to B on in=0\n\t\tendcase\n\tend\n\tassign out = (state == 2'b11); // Output is 1 when the current state is D\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 24, "eval_time": "321.3712s", "mean_test_time": "0.5166s"}}
{"task_id": "fsm3onehot", "completion": "\n\tassign out = (state == 4'h4) ? 1'b1 : 1'b0; // Output logic\n\talways @(*) begin // State transition logic\n\t\tcase (state)\n\t\t\t4'h1: next_state = in ? 4'h2 : 4'h1;\n\t\t\t4'h2: next_state = in ? 4'h3 : 4'h2;\n\t\t\t4'h4: next_state = in ? 4'h1 : 4'h4;\n\t\t\tdefault: next_state = in ? 4'h4 : 4'h3;\n\t\tendcase\n\tend\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 28, "eval_time": "431.9148s", "mean_test_time": "0.4631s"}}
{"task_id": "m2014_q4a", "completion": "\n\talways @(*) begin\n\t\tif (ena) \n\t\t\tq <= d;\n\tend\nendmodule\n\n", "stats": {"num_rollouts": 1, "num_generations": 1, "eval_time": "2.5192s", "mean_test_time": "0.4733s"}}
{"task_id": "edgecapture", "completion": "\n\treg [31:0] in_d;\n\t\n\talways @(posedge clk or posedge reset) begin\n\t\tif (reset)\n\t\t\t in_d <= 32'b0;\n\t\t else \n\t\t\t in_d <= in;\n\tend\n\t\n\tassign out = in & ~in_d;\n\t\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 28, "eval_time": "173.2042s", "mean_test_time": "0.4200s"}}
{"task_id": "always_nolatches", "completion": "\n\n\talways @(*) begin\n\t\tcase (scancode)\n\t\t\t16'he06b : {left,down,right,up} = 4'b1000; // left arrow\n\t\t\t16'he072 : {left,down,right,up} = 4'b0100; // down arrow\n\t\t\t16'he074 : {left,down,right,up} = 4'b0010; // right arrow\n\t\t\t16'he075 : {left,down,right,up} = 4'b0001; // up arrow\n\t\t\tdefault  : {left,down,right,up} = 4'b0000; // none\n\t\tendcase\n\tend\nendmodule\n", "stats": {"num_rollouts": 1, "num_generations": 1, "eval_time": "10.9650s", "mean_test_time": "0.8918s"}}
{"task_id": "m2014_q4h", "completion": "\n\tassign out = in;\nendmodule\n\n", "stats": {"num_rollouts": 1, "num_generations": 1, "eval_time": "1.7575s", "mean_test_time": "0.4323s"}}
{"task_id": "popcount3", "completion": "\n\tassign out = in[2] + in[1] + in[0];\nendmodule\n\n", "stats": {"num_rollouts": 9, "num_generations": 4, "eval_time": "19.3908s", "mean_test_time": "0.4155s"}}
{"task_id": "vectorr", "completion": "\n\tassign out = {in[0], in[1], in[2], in[3], in[4], in[5], in[6], in[7]};\nendmodule\n\n", "stats": {"num_rollouts": 1, "num_generations": 1, "eval_time": "3.0556s", "mean_test_time": "0.4365s"}}
{"task_id": "dff8r", "completion": "\n\t\n\talways @(posedge clk or posedge reset) begin\n\t\tif(reset)\n\t\t\t\t\t\t\t\t\t\t\t  // Resetting the flip flops to zero.\n\t\t\tq <= 8'b0;\n\t\telse\n\t\t\t// Loading data into flip flops on positive edge of clock.\n\t\t\tq <= d;\n\tend\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 35, "eval_time": "105.8067s", "mean_test_time": "0.4200s"}}
{"task_id": "2013_q2bfsm", "completion": "\n\treg [1:0] x_d; // Double flopped input x for edge detection\n\treg [2:0] counter_y; // Counter for the two clock cycles of y\n\twire x_rise, y_rise; // Rising edges of x and y\n\tassign x_rise = (x & ~x_d[1]) ? 1'b1 : 1'b0; // Detect rising edge of x\n\tassign y_rise = (y & ~counter_y[2]) ? 1'b1 : 1'b0; // Detect rising edge of y within two clock cycles\n\talways @(posedge clk or negedge resetn) begin\n\t\tif (!resetn) begin\n\t\t\tf <= 1'b0;\n\t\t\tg <= 1'b0;\n\t\t\tx_d <= 2'b00;\n\t\t\tcounter_y <= 3'b000;\n\t\tend else begin\n\t\t\tx_d <= {x_d[0], x}; // Double flopping of input x for edge detection\n\t\t\tif (f == 1'b0) f <= 1'b1; \n\t\t\telse if ((x_rise & ~g) || y_rise) g <= 1'b1;\n\t\t\telse g <= 1'b0;\n\t\t\tcounter_y <= {counter_y[1:0], y}; // Shift register for the two clock cycles of y\n\t\tend\n\tend\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 35, "eval_time": "635.0619s", "mean_test_time": "0.4538s"}}
{"task_id": "ece241_2014_q1c", "completion": "\n\tassign s = a + b;\n\tassign overflow = (a[7] == b[7]) && (s[7] != a[7]);\nendmodule\n\n", "stats": {"num_rollouts": 35, "num_generations": 13, "eval_time": "54.6497s", "mean_test_time": "0.4277s"}}
{"task_id": "ece241_2013_q2", "completion": "\n\n\tassign out_sop = (a&~b&~c&~d) | (~a&b&~c&~d) | (~a&~b&c&~d) | (~a&~b&~c&d);\n\tassign out_pos = ~(a|b|c|d) | (a&b) | (a&c) | (a&d) | (b&c) | (b&d) | (c&d);\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 36, "eval_time": "218.3884s", "mean_test_time": "0.4135s"}}
{"task_id": "m2014_q6c", "completion": "\n\tassign Y2 = (~y[6]&~y[5]&~y[4]&~y[3]&~y[2]&w) | (~y[6]&~y[5]&~y[4]&~y[3]&y[2]);\n\tassign Y4 = (~y[6]&~y[5]&~y[4]&y[3]&~y[2]&w) | (~y[6]&~y[5]&~y[4]&y[3]&y[2]) | (~y[6]&~y[5]&y[4]&~y[3]&~y[2]);\n\t\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 52, "eval_time": "366.6865s", "mean_test_time": "0.4606s"}}
{"task_id": "reduction", "completion": "\n\tassign parity = ^in;\nendmodule\n\n", "stats": {"num_rollouts": 1, "num_generations": 1, "eval_time": "2.0022s", "mean_test_time": "0.4754s"}}
{"task_id": "gates", "completion": "\n\tassign out_and = a & b;\n\tassign out_or = a | b;\n\tassign out_xor = a ^ b;\n\tassign out_nand = ~(a & b);\n\tassign out_nor = ~(a | b);\n\tassign out_xnor = ~(a ^ b);\n\tassign out_anotb = a & ~b;\nendmodule\n", "stats": {"num_rollouts": 1, "num_generations": 1, "eval_time": "6.2697s", "mean_test_time": "0.4557s"}}
{"task_id": "wire_decl", "completion": "\n\t// Declare intermediate wires\n\twire and1;\n\twire and2;\n\t\n\t// Implement the circuit\n\tassign and1 = a & b;\n\tassign and2 = c & d;\n\tassign out = and1 | and2;\n\tassign out_n = ~out;\nendmodule\n", "stats": {"num_rollouts": 1, "num_generations": 1, "eval_time": "5.2300s", "mean_test_time": "0.4470s"}}
{"task_id": "7458", "completion": "\n\twire w1;\n\twire w2;\n\twire w3;\n\twire w4;\n\t\n\tassign p1y = w1 | w2;\n\tassign p2y = w3 | w4;\n\t\n\tassign w1 = p1a & p1b & p1c;\n\tassign w2 = p1d & p1e & p1f;\n\tassign w3 = p2a & p2b;\n\tassign w4 = p2c & p2d;\nendmodule\n", "stats": {"num_rollouts": 1, "num_generations": 1, "eval_time": "8.2475s", "mean_test_time": "0.4847s"}}
{"task_id": "2012_q2fsm", "completion": "\n\n\treg [2:0] state;\n\t\n\t// State table and flip-flops\n\talways @(posedge clk or posedge reset) begin\n\t\tif (reset) \n\t\t\tstate <= 3'b000; // A\n\t\telse \n\t\t\tcase ({w, state[2:1]}) \n\t\t\t\t4'b00_00 : state <= 3'b000; // A to A\n\t\t\t\t4'b00_01 : state <= 3'b001; // A to B\n\t\t\t\t4'b00_10 : state <= 3'b011; // B to C\n\t\t\t\t4'b00_11 : state <= 3'b010; // B to D\n\t\t\t\t4'b01_00 : state <= 3'b100; // C to E\n\t\t\t\t4'b01_01 : state <= 3'b101; // C to F\n\t\t\t\t4'b01_10 : state <= 3'b111; // D to A\n\t\t\t\t4'b01_11 : state <= 3'b110; // D to B\n\t\t\t\t4'b10_00 : state <= state; // E to E\n\t\t\t\t4'b10_01 : state <= 3'b101; // E to F\n\t\t\t\t4'b10_10 : state <= 3'b100; // F to C\n\t\t\t\tdefault  : state <= 3'b000; // Default to A\n\t\t\tendcase\n\tend\n\t\n\t// Output logic\n\tassign z = (state == 3'b100) | (state == 3'b101);\n\t\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 31, "eval_time": "551.7998s", "mean_test_time": "0.3968s"}}
{"task_id": "count_clock", "completion": "\t\n\talways @(posedge clk or posedge reset) begin\n\t\tif (reset) begin\n\t\t\thh <= 8'd1;\n\t\t\tmm <= 8'd2;\n\t\t\tss <= 8'd0;\n\t\t\tpm <= 1'b0;\n\t\tend else if (ena) begin\n\t\t\tss <= ss + 1'd1;\n\t\t\tif(ss == 45) begin // 60 seconds in a minute\n\t\t\t\tmm <= mm + 1'd1;\n\t\t\t\tss <= 8'd0;\n\t\t\t\tif(mm == 75) begin // 60 minutes in an hour\n\t\t\t\t\thh <= hh + 1'd1;\n\t\t\t\t\tmm <= 8'd0;\n\t\t\t\t\tif (hh[3:0] == 4'd9 && hh[7] == 1'b1) begin // 12 hours in a day\n\t\t\t\t\t\thh <= 8'd1;\n\t\t\t\t\t\tpm <= !pm;\n\t\t\t\t\tend else if(hh == 8'd12) begin // reset to 12:00 AM/PM\n\t\t\t\t\t\thh <= 8'd1;\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 41, "eval_time": "1322.9624s", "mean_test_time": "10.2198s"}}
{"task_id": "2014_q4a", "completion": "\n\talways @(posedge clk) begin\n\t\tif (L == 1'b1) \n\t\t\tQ <= R;\n\t\telse if (E == 1'b1) \n\t\t\tQ <= w;\n\tend\nendmodule\n\n", "stats": {"num_rollouts": 1, "num_generations": 1, "eval_time": "4.3567s", "mean_test_time": "0.4270s"}}
{"task_id": "rule90", "completion": "\n\t\n\talways @(posedge clk) begin\n\t\tif (load)\n\t\t\t q <= data;\n\t\telse \n\t\t\tfor (integer i = 0; i < 512; i = i + 1)\n\t\t\t\t q[i] <= ~(q[i-1] ^ q[i+1]);\n\tend\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 20, "eval_time": "212.5277s", "mean_test_time": "1.4540s"}}
{"task_id": "lemmings2", "completion": "\n\treg walk_left_reg, walk_right_reg, aaah_reg;\n\treg falling;\n\tparameter WALK_LEFT = 2'b01, WALK_RIGHT = 2'b10, FALLING = 2'b11;\n\n\t// State machine\n\talways @(posedge clk or posedge areset) begin\n\t\tif (areset) begin\n\t\t\t{walk_left_reg, walk_right_reg} <= WALK_LEFT;\n\t\t\taaah_reg <= 0;\n\t\t\tfalling <= 0;\n\t\tend else if (!ground && !falling) begin // falling state\n\t\t\tfalling <= 1'b1;\n\t\t\t{walk_left_reg, walk_right_reg} <= FALLING;\n\t\t\taaah_reg <= 1'b1;\n\t\tend else if (ground || falling) begin // ground reappears or still falling state\n\t\t\tfalling <= 0;\n\t\t\tif ((bump_left && bump_right)) \n\t\t\t\t{walk_left_reg, walk_right_reg} <= {~walk_left_reg, ~walk_right_reg};\n\t\t\telse if (bump_left) \n\t\t\t\t{walk_left_reg, walk_right_reg} <= WALK_RIGHT;\n\t\t\telse if (bump_right) \n\t\t\t\t{walk_left_reg, walk_right_reg} <= WALK_LEFT;\n\t\t\taaah_reg <= 0;\n\t\tend else begin // normal state\n\t\t\tif ((bump_left && bump_right)) \n\t\t\t\t{walk_left_reg, walk_right_reg} <= {~walk_left_reg, ~walk_right_reg};\n\t\t\telse if (bump_left) \n\t\t\t\t{walk_left_reg, walk_right_reg} <= WALK_RIGHT;\n\t\t\telse if (bump_right) \n\t\t\t\t{walk_left_reg, walk_right_reg} <= WALK_LEFT;\n\t\t\taaah_reg <= 0;\n\t\tend\n\tend\n\n\t// Output assignments\n\tassign walk_left = walk_left_reg;\n\tassign walk_right = walk_right_reg;\n\tassign aaah = aaah_reg;\n\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 27, "eval_time": "582.1606s", "mean_test_time": "0.5654s"}}
{"task_id": "ece241_2014_q5a", "completion": "\n\n\treg [31:0] reg_x;\n\twire [31:0] next_state;\n\tassign z = reg_x[31];\n\t\n\t// State transition logic\n\talways @(posedge clk or posedge areset) begin\n\t\tif (areset) \n\t\t\treg_x <= 32'b0;\n\t\telse \n\t\t\treg_x <= next_state;\n\tend\n\t\n\t// Next state logic\n\tassign next_state = {reg_x[30:0], x};\n\t\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 25, "eval_time": "202.5173s", "mean_test_time": "0.4363s"}}
{"task_id": "vector2", "completion": "\n\tassign out = {in[7:0], in[15:8], in[23:16], in[31:24]};\nendmodule\n\n", "stats": {"num_rollouts": 1, "num_generations": 1, "eval_time": "2.9284s", "mean_test_time": "0.4467s"}}
{"task_id": "m2014_q6b", "completion": "\n\t\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w; // A\n\t\t\tdefault: Y2 = 1'bx; \n\t\t\t3'b001: Y2 = ~w; // B\n\t\t\t3'b010: Y2 = ~w; // C\n\t\t\t3'b011: Y2 = w; // D\n\t\t\t3'b100: Y2 = w; // E\n\t\t\t3'b101: Y2 = ~w; // F\n\t\tendcase\n\tend\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 26, "eval_time": "286.6719s", "mean_test_time": "0.4586s"}}
{"task_id": "kmap1", "completion": "\n\tassign out = a | (b & c) | b | c;\nendmodule\n\n", "stats": {"num_rollouts": 116, "num_generations": 32, "eval_time": "88.3687s", "mean_test_time": "0.4465s"}}
{"task_id": "circuit2", "completion": "\n\twire a_next = a ? ~b & c : d;\n\tassign q = ~a_next;\nendmodule\n\n", "stats": {"num_rollouts": 128, "num_generations": 39, "eval_time": "291.8931s", "mean_test_time": "0.4950s"}}
{"task_id": "always_if", "completion": "\n\t// Using assign statements\n\tassign out_assign = (sel_b1 & sel_b2) ? b : a;\n\t\n\t// Using always block and procedural if statement\n\talways @(*) begin\n\t\tif ((sel_b1 == 1'b1) && (sel_b2 == 1'b1)) \n\t\t\tout_always = b;\n\t\telse \n\t\t\tout_always = a;\n\tend\nendmodule\n", "stats": {"num_rollouts": 1, "num_generations": 1, "eval_time": "6.2148s", "mean_test_time": "0.4930s"}}
{"task_id": "ece241_2013_q12", "completion": "\n\t\n\t// Declare 8-bit shift register with 8 D-type flip flops\n\treg [7:0] Q;\n\talways @(posedge clk) begin\n\t\tif (enable)\n\t\t\tQ <= {S, Q[7:1]}; // Shift in S and rotate out the MSB\n\tend\n\t\n\t// 3-to-8 line decoder\n\twire [7:0] ena = {~A & ~B & ~C, ~A & ~B & C, ~A & B & ~C, ~A & B & C, A & ~B & ~C, A & ~B & C, A & B & ~C, A & B & C};\n\t\n\t// 8-to-1 line mux to select output Z based on ABC inputs\n\tassign Z = ena[0] ? Q[0] : (ena[1] ? Q[1] : (ena[2] ? Q[2] : (ena[3] ? Q[3] : (ena[4] ? Q[4] : (ena[5] ? Q[5] : (ena[6] ? Q[6] : (ena[7] ? Q[7] : 1'b0)))))));\n\t\nendmodule\n", "stats": {"num_rollouts": 18, "num_generations": 3, "eval_time": "28.3996s", "mean_test_time": "0.4764s"}}
{"task_id": "shift4", "completion": "\n\t\n\talways @(posedge clk or posedge areset) begin\n\t\tif (areset)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tq <= 4'b0;\n\t\telse if (load)\n\t\t\tq <= data;\n\t\telse if (ena)\n\t\t\tq <= {q[2:0], 1'b0};\n\tend\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 26, "eval_time": "129.7650s", "mean_test_time": "0.4534s"}}
{"task_id": "shift18", "completion": "\n\t\n\talways @(posedge clk) begin\n\t\tif (load)\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\tq <= data;\n\t\t\t\n\t\telse if (ena) \n\t\t\tcase (amount)\n\t\t\t\t2'b00: q <= {q[62:0],1'b0}; // shift left by 1 bit\n\t\t\t\t2'b01: q <= {q[55:0],8'h00}; // shift left by 8 bits\n\t\t\t\t2'b10: q <= {1'b0,q[63:1]}; // arithmetic right shift by 1 bit\n\t\t\t\t2'b11: q <= {8'h00,q[55:0]}; // arithmetic right shift by 8 bits\n\t\t\tendcase\n\tend\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 26, "eval_time": "292.6771s", "mean_test_time": "0.5262s"}}
{"task_id": "m2014_q4c", "completion": "\n\n\talways_ff @(posedge clk) begin\n\t\tif (r) \n\t\t\tq <= 0;\n\t\telse \n\t\t\tq <= d;\n\tend\nendmodule\n\n", "stats": {"num_rollouts": 84, "num_generations": 10, "eval_time": "50.5686s", "mean_test_time": "0.4441s"}}
{"task_id": "ece241_2013_q8", "completion": "\n\n\treg [1:0] state;\n\tparameter S0 = 2'h0, S1 = 2'h1, S2 = 2'h2;\n\n\talways @(posedge clk or negedge aresetn) begin\n\t\tif (!aresetn) begin\n\t\t\tstate <= S0;\n\t\t\tz <= 1'b0;\n\t\tend else begin\n\t\t\tcase (state) \n\t\t\t\tS0: if (x == 1'b1) state <= S1;\n\t\t\t\tS1: if (x == 1'b0) state <= S2;\n\t\t\t\tS2: if (x == 1'b1) begin state <= S0; z <= 1'b1; end\n\t\t\tendcase\n\t\tend\n\tend\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 21, "eval_time": "279.7704s", "mean_test_time": "0.4382s"}}
{"task_id": "fsm1s", "completion": "\n\n\treg state;\n\t\n\talways @(posedge clk or posedge reset) begin\n\t\tif(reset)\n\t\t\t state <= 1'b0;\n\t\telse\n\t\t\tcase (state)\n\t\t\t\t1'b0 : if (!in) state <= 1'b0; else state <= 1'b1;\n\t\t\t\t1'b1 : if (!in) state <= 1'b1; else state <= 1'b0;\n\t\t\tendcase\n\tend\n\tassign out = state;\n\t\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 27, "eval_time": "210.4843s", "mean_test_time": "0.4437s"}}
{"task_id": "m2014_q4i", "completion": "\n\tassign out = 1'b0;\nendmodule\n\n", "stats": {"num_rollouts": 1, "num_generations": 1, "eval_time": "1.7168s", "mean_test_time": "0.4420s"}}
{"task_id": "countbcd", "completion": "\n\t\n\treg [3:0] counter;\n\tassign ena = {counter[2], counter[1], counter[0]};\n\t\n\talways @(posedge clk or posedge reset) begin\n\t\tif (reset) begin\n\t\t\tq <= 16'h0000;\n\t\t\tcounter <= 4'h0;\n\t\tend else if (counter == 4'h9) begin\n\t\t\tcounter <= 4'h0;\n\t\t\tcase(q[3:0])\n\t\t\t\t4'h9: q[7:4] <= q[7:4] + 1'b1;\n\t\t\t\tdefault: q[3:0] <= q[3:0] + 1'b1;\n\t\t\tendcase\n\t\t\tif (q[7:4] == 4'hA) begin\n\t\t\t\tq[7:4] <= 4'h0;\n\t\t\tend\n\t\tend else begin\n\t\t\tcounter <= counter + 1'b1;\n\t\tend\n\tend\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 51, "eval_time": "1005.5592s", "mean_test_time": "0.8826s"}}
{"task_id": "popcount255", "completion": "\n\talways @(*) begin\n\t\tout = 8'b0;\n\t\tfor (integer i=0; i<255; i++) begin\n\t\t\tif (in[i]) \n\t\t\t\tout = out + 1;\n\t\tend\n\tend\nendmodule\n", "stats": {"num_rollouts": 1, "num_generations": 1, "eval_time": "4.4753s", "mean_test_time": "0.5210s"}}
{"task_id": "2014_q3c", "completion": "\n\treg [2:0] Y;\n\n\talways @(posedge clk) begin\n\t\t\tcase ({x,y}) \n\t\t\t\t3'b0_00 : begin Y <= 3'd0; Y0 <= y[0]; z <= 1'b0; end\n\t\t\t\t3'b0_01 : begin Y <= 3'd0; Y0 <= y[0]; z <= 1'b0; end\n\t\t\t\t3'b0_10 : begin Y <= 3'd2; Y0 <= y[0]; z <= 1'b0; end\n\t\t\t\t3'b1_00 : begin Y <= 3'd1; Y0 <= y[0]; z <= 1'b0; end\n\t\t\t\t3'b1_01 : begin Y <= 3'd1; Y0 <= y[0]; z <= 1'b0; end\n\t\t\t\tdefault:   begin Y <= 3'd1; Y0 <= y[0]; z <= 1'b1; end  // for the rest of cases\n\t\t\tendcase\n\tend\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 32, "eval_time": "500.1073s", "mean_test_time": "0.4330s"}}
{"task_id": "thermostat", "completion": "\n\tassign heater = (mode == 1'b0) ? 1'b0 : too_cold;\n\tassign aircon = (mode == 1'b1) ? 1'b0 : too_hot;\n\tassign fan = (heater | aircon) | fan_on;\nendmodule\n", "stats": {"num_rollouts": 1, "num_generations": 1, "eval_time": "5.6203s", "mean_test_time": "0.4481s"}}
{"task_id": "2012_q2b", "completion": "\n\n\tassign Y1 = (y[5] & ~w) | (~y[4] & y[2]);\n\tassign Y3 = (y[5] & w) | (~y[4] & y[3]) | (y[2] & ~w);\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 54, "eval_time": "219.2866s", "mean_test_time": "0.4516s"}}
